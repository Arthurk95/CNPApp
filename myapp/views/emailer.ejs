<!DOCTYPE html>
<html>
    <head>
        <%- include headerlinks.ejs %>
        <link rel='stylesheet' href='/stylesheets/style.css' />
        <link rel='stylesheet' href='/stylesheets/emailer.css' />
        <link rel='stylesheet' href='/stylesheets/form.css' />
        <link rel='stylesheet' href='/stylesheets/ulList.css' />
        <link rel='stylesheet' href='/stylesheets/editor.css' />
        <link rel="stylesheet" href="//cdn.quilljs.com/1.3.6/quill.snow.css">

        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        
        <script src="/javascripts/emailerScripts.js"></script>
        <script src="/javascripts/utilityScripts.js"></script>

        <script>
            function fillSelect(id, list){
                var op = 'op';
                var select = document.getElementById(id).getElementsByTagName("select")[0];
                var len = Object.keys(list).length;
                for(var i = 0; i < len; i++){
                    var option = document.createElement("option");
                    if(i == 0){
                        select.append(option);
                    }
                    else{
                        op = 'op' + i;
                        option.text = list[op]; 
                        option.value = list[op];
                        select.appendChild(option);
                    }
                }
            }
            
        </script>

    </head>
    <body>
        <div class="page-with-side-menu">
            <div onclick="$(this).toggleClass('active'); toggleBodyOverflow();" class="side-header-mobile-burger">
                <i class="fa fa-bars"></i>
            </div>
            <%- include header.ejs %>
            <div class="content-with-side-header noPadding">
                <div id="mainEmailerContainer" class="flexContainer spaceAround flexAlignCenter">
                    <div id="stepOne" class="flexCenter flexColumn borderBox light-content-BG borderRadiusMedium width90 marginTop30">
                        <p class="title theme-color2-BG font30px padding20px">Step 1: Email Template</p>
                        <div class="veryHeavyPadding">
                            <ul class="flex flexColumn marginBottom40">
                                <li class="marginBottom10">
                                    <label for="summary">Summary</label>
                                    <!-- toolbar container should be abstracted later -->
                                    <div id="summary-toolbar-container">
                                        <span class="ql-formats">
                                            <select class="ql-size">
                                                <option value="10px">Small</option>
                                                <option selected>Normal</option>
                                                <option value="18px">Large</option>
                                                <option value="32px">Huge</option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-align" value=""></button>
                                            <button class="ql-align" value="center"></button>
                                            <button class="ql-align" value="right"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <select class="ql-color">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                            <select class="ql-background">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                        </span>
                                      </div>
                                    <div id="summary">
                                        <!-- <%- summary %> -->
                                    </div>
                                    
                                </li>
                                <li class="marginBottom10">
                                    <label for="snack">AM Snack</label>
                                    <div id="snack-toolbar-container">
                                        <span class="ql-formats">
                                            <select class="ql-size">
                                                <option value="10px">Small</option>
                                                <option selected>Normal</option>
                                                <option value="18px">Large</option>
                                                <option value="32px">Huge</option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-align" value=""></button>
                                            <button class="ql-align" value="center"></button>
                                            <button class="ql-align" value="right"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <select class="ql-color">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                            <select class="ql-background">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                        </span>
                                      </div>
                                    <div id="snack">
                                        <!-- <p><%- snack %></p> -->
                                    </div>
                                </li>
                                <li class="marginBottom10">
                                    <label for="lunch">Lunch</label>
                                    <div id="lunch-toolbar-container">
                                        <span class="ql-formats">
                                            <select class="ql-size">
                                                <option value="10px">Small</option>
                                                <option selected>Normal</option>
                                                <option value="18px">Large</option>
                                                <option value="32px">Huge</option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-align" value=""></button>
                                            <button class="ql-align" value="center"></button>
                                            <button class="ql-align" value="right"></button>
                                        </span>
                                        <span class="ql-formats">
                                            <select class="ql-color">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                            <select class="ql-background">
                                                <option selected></option>
                                                <option value="red"></option>
                                                <option value="orange"></option>
                                                <option value="yellow"></option>
                                                <option value="green"></option>
                                                <option value="blue"></option>
                                                <option value="purple"></option>
                                            </select>
                                        </span>
                                        <span class="ql-formats">
                                            <button class="ql-bold"></button>
                                            <button class="ql-italic"></button>
                                            <button class="ql-underline"></button>
                                            <button class="ql-strike"></button>
                                        </span>
                                      </div>
                                    <div id="lunch">
                                        <!-- <p><%- lunch %></p> -->
                                    </div>
                                </li>
                            </ul>
                            <!-- Create the editor container -->
                            
                            <div class="flex spaceBetween flexAlignCenter flexCollapseMobile">
                                <div id="saveButtonStep1" class="buttonWithIcon" onclick="updateDailyInfo();">
                                    <p>Save</p>
                                    <i class="fas fa-check"></i>
                                </div>
                                <div class="buttonWithIcon" onclick="toNextStep();">
                                    <p>Next</p>
                                    <i class="fas fa-caret-right"></i>
                                </div>
                            </div>
                        </div>
                    </div>

                    

                    <div id="stepTwo" class="contentWithSidebar flexColumn width100">
                        <div class="width100 dark-content-BG flex flexAlignCenter width90Mobile center marginBottom20">
                            <div id="sendEmailButton" class="buttonWithIcon width30 width90Mobile theme-color2-BG width40 center marginTop10 marginBottom10 disabledButton" onclick="sendEmails(<%= JSON.stringify(reports) %>, <%= JSON.stringify(behaviors) %>); toggleElementID('spinner'); ">
                                <p>Send Emails</p>
                                <div style="display: none" id="spinner" class="spinning-loader marginLeft10 marginRight20"></div>
                            </div>
                        </div>
                        
                        <!-- Content -->
                        <div class="width90 center light-content-BG borderRadiusMedium hideOverflow marginBottom10"> 
                            <div id="stepTwoTitle" class="heavyPadding theme-color1-light-BG flex spaceBetween flexAlignCenter flexWrap">
                                <p class="font30px light-text marginLeft10"></p>
                                <p class="displayNone" id="currentStudentID"></p>
                                <div id="reviewButton" class="buttonWithIcon theme-color2-light-BG" onclick="renderView(<%= JSON.stringify(behaviors) %>)">
                                    <!-- <div class="buttonWithIcon theme-color2-light-BG" onclick="openReview()"> -->
                                    <p class="mediumPadding">Review</p>
                                </div>
                            </div>
        
                            <!-- Review Form -->
                            <div id="reviewForm" class="formWindow">
                                <div class="formWindow-content flexContainer width80 width90Mobile">
                                    <span class="close" onclick="closeForm()"><i class="fas fa-times"></i></span>
                                    <p id="reviewTitle" class="font40px marginBottom40 centerText theme-color2-light-text">Review</p>
                                    <div class="center width90 white-BG padding30px">
                                        <div id="reviewData"></div>
                                    </div>
                                    <div class="flex flexCenter">
                                        <a class="formSubmitButton flexGrow1 maxWidth600px" onclick="studentApproved(this)">Approve</a>
                                    </div>
                                    
                                </div>
                            </div>
        
                            <!-- Email Report Form -->
                            <div id="reportForm" class="formWindow">
                                <div class="formWindow-content flexContainer width80 width90Mobile">
                                    <span class="close" onclick="closeForm()"><i class="fas fa-times"></i></span>
                                    <p id="reportTitle" class="font40px marginBottom40 centerText theme-color2-light-text">Email Report</p>
                                    <div class="center width90 white-BG padding30px">
                                        <div id="reportData">
                                            <table id="reportTable">
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Email(s)</th>
                                                    <th>Result</th>
                                                    <th></th>
                                                    <!-- last column does not need title, just for showing error message if needed -->
                                                </tr>
                                            </table>
                                            <p id="reportStatus"></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
        
                            <div class="content"> <!-- activities and dropdowns -->
                                <div class="flex flexCollapseMobile marginBottom40 spaceBetween">
                                    <div id="activities" class="width30 width100Mobile">
                                        <p class="mediumFont dark-text marginBottom20 centerText">Activities</p>
                                        <ul id="activitiesList" class="flex flexColumn flexAlignCenter dark-text width80 center maxHeight250px"></ul>
                                    </div>
        
                                    <!-- Behavior dropdowns -->
                                    <div id="behaviorsList" class="flex flexColumn flexCenter heavyPadding width70 width100Mobile">
                                        <% behaviors.forEach((behavior, index) => { %>
                                            <div id="<%= behavior.name %>" class="flex flexAlignCenter spaceBetween flexCollapseMobile marginBottom10 flexWrap">
                                                <label for="<%= behavior.name %>" class="width20 width100Mobile"><%= behavior.name %></label>
                                                
                                                <div class="flex spaceAround flexAlignCenter relative width60 width100Mobile">
                                                    <select id="<%= behavior.name%>Select" name="<%= behavior.name %>">
                                                    </select>
                                                    
                                                    <input style="display: none" id="<%=behavior.name %>-text-box" placeholder="<%=behavior.name %> Notes..."></input>
                                            
                                                    <a id="<%= behavior.name %>-note-button" onclick="toggleBetweenElements('<%=behavior.name %>-text-box', '<%= behavior.name %>Select'); toggleClassIfInputNotEmpty('<%=behavior.name %>-text-box', this, 'theme-color2-light-BG', 'theme-color4-light-BG');" class="marginLeft10 borderRadiusSmall theme-color4-light-BG lightPadding">
                                                        <i class="fas fa-sticky-note dark-text"></i>
                                                    </a>
                                                </div>
                                            </div>
        
                                            <!-- Add note behavior forms -->
                                            <div id="<%= behavior.name %>Form" class="formWindow">
                                                <div class="formWindow-content width500px width90Mobile flexContainer">
                                                    <span class="close" onclick="closeForm()"><i class="fas fa-times"></i></span>
                                                    <p class="font50px marginBottom40 centerText theme-color2-light-text"><%= behavior.name %></p>
                                                    <div class="flex flexColumn flexCenter center flexAlignCenter marginBelowChildren10 width80 width90Mobile">
                                                        <textarea class="width100" id="<%=behavior.name %>-text-box" placeholder="<%=behavior.name %> notes.."></textarea>
                                                    </div>
                                                    <!-- <div class="flex flexCenter">
                                                        <a class="formSubmitButton flexGrow1 maxWidth600px" onclick="behaviorNote(this)">Save Note</a>
                                                    </div> -->
                                                    
                                                </div>
                                            </div>
        
                                            <script>fillSelect('<%= behavior.name %>', <%- JSON.stringify(behavior) %>);</script>
                                                
                                        <% }) %>
                                    </div>
                                </div>
                                <div class="flex spaceBetween flexAlignCenter flexCollapseMobile">
                                    <div class="theme-color4-BG buttonWithIcon" onclick="toPreviousStep(); resetQuills();">
                                        <i class="fas fa-caret-left"></i>
                                        <p>Back</p>
                                    </div>
                                    <div id="saveButtonStep2" class="buttonWithIcon" onclick="studentSaved(<%= JSON.stringify(behaviors) %>); toggleStyle(this, 'theme-color2-light-BG');">
                                        <p>Save</p>
                                        <i class="fas fa-check"></i>
                                    </div>
                                </div>
                            </div>
                        </div> <!-- End content -->
                        
                        <!-- Right column (students) -->
                        <div class="width90 center light-content-BG marginBottom10">
                            <ul id="listOfStudents" class="studentsList flexWrap width90 center" >
                            <% if (reports.length > 0) { %>
                                <script>passToJS(<%- JSON.stringify(reports) %>);</script>
                                <% reports.forEach((report, index) => { %>
                                    <li id="student<%= index %>" onclick="studentSelected(this, <%= index %>)"><%= report.name %></li>
                                <% }) %>
                            <% } else { %>
                                <li>No Students</li>
                            <% } %>
                            </ul>
                            
                        </div>
                    </div> <!-- End step two -->
                </div>
            </div>
        </div>
        
        <form id="emailReportForm" method="POST" action="/emailer/emailReport">
            <input id="report" name="report" type="hidden">
        </form>
        <script>
        passRemindersToJS(<%- JSON.stringify(reminders) %>);
        passHeaderToJS(<%- JSON.stringify(header) %>);
        passFooterToJS(<%- JSON.stringify(footer) %>);
        
        initEmailerVariables();
        
        
        (function() {
            function scrollHorizontally(e) {
                e = window.event || e;
                var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
                document.getElementById('listOfStudents').scrollLeft -= (delta*40); // Multiplied by 40
                e.preventDefault();
            }
            if (document.getElementById('listOfStudents').addEventListener) {
                // IE9, Chrome, Safari, Opera
                document.getElementById('listOfStudents').addEventListener("mousewheel", scrollHorizontally, false);
                // Firefox
                document.getElementById('listOfStudents').addEventListener("DOMMouseScroll", scrollHorizontally, false);
            } else {
                // IE 6/7/8
                document.getElementById('listOfStudents').attachEvent("onmousewheel", scrollHorizontally);
            }
        })();
        </script>

        <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
        <script>

            Quill.register(Quill.import('attributors/style/size'), true);
            Quill.register(Quill.import('attributors/style/direction'), true);
            Quill.register(Quill.import('attributors/style/align'), true);

            var summaryQuill = new Quill('#summary', {
                modules: {
                    toolbar: '#summary-toolbar-container'
                },
                placeholder: 'Daily summary..',
                theme: 'snow'
            })
            var snackQuill = new Quill('#snack', {
                modules: {
                    toolbar: '#snack-toolbar-container'
                },
                placeholder: 'Snack info..',
                theme: 'snow'
            })
            var lunchQuill = new Quill('#lunch', {
                modules: {
                    toolbar: '#lunch-toolbar-container'
                },
                placeholder: 'Lunch info..',
                theme: 'snow'
            })
            // var reviewQuill = new Quill('#review', {
            //     modules: {
            //         toolbar: '#toolbar-container'
            //     },
            //     placeholder: 'Daily summary..',
            //     theme: 'snow'
            // })

            summaryQuill.setContents(<%- summary.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+').replace(/CLEANSED APSTR STRING/g, "'") %>);
            snackQuill.setContents(<%- snack.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+').replace(/CLEANSED APSTR STRING/g, "'") %>)
            lunchQuill.setContents(<%- lunch.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+').replace(/CLEANSED APSTR STRING/g, "'") %>)
            
            // summaryQuill.setContents(`{"ops":[{"insert":"reset"}]}`);
            // snackQuill.setContents(`{"ops":[{"insert":"reset"}]}`);
            // lunchQuill.setContents(`{"ops":[{"insert":"reset"}]}`);

            function updateDailyInfo() {
                var filteredSummary = JSON.stringify(summaryQuill.getContents());
                filteredSummary = escapeSpecialChars(filteredSummary);
                var filteredSnack = JSON.stringify(snackQuill.getContents());
                filteredSnack = escapeSpecialChars(filteredSnack);
                var filteredLunch = JSON.stringify(lunchQuill.getContents());
                filteredLunch = escapeSpecialChars(filteredLunch);

                pushSummary(filteredSummary);
                pushAmSnack(filteredSnack);
                pushLunch(filteredLunch);
                // pushSummary(JSON.stringify(summaryQuill.getContents()));
                // pushAmSnack(JSON.stringify(snackQuill.getContents()));
                // pushLunch(JSON.stringify(lunchQuill.getContents()));
            }


        </script>

        <script>
            var listOfReminders = <%- JSON.stringify(reminders) %>;
            var numRemindersShown = 0;
            function addReminder(){
                numRemindersShown++;
                var reminders = document.getElementById('reminders');
                var select = document.createElement("select");
                select.classList = "width60";
                for(var i = 0; i < listOfReminders.length; i++){
                    var option = document.createElement("option");
                    option.text = listOfReminders[i].title;

                    select.appendChild(option);
                }

                var label = document.createElement("label");
                label.innerHTML = "Reminder " + numRemindersShown;
                label.classList = "dark-text";
                var icon = document.createElement("i");
                icon.classList = "fas fa-minus theme-color4-text marginRight10 hoverable";
                icon.onclick = function(){li.parentNode.removeChild(li)};
                var div = document.createElement("div");
                div.classList = "flex spaceBetween flexAlignCenter";
                var li = document.createElement("li");
                li.classList = "flex spaceBetween flexAlignCenter mediumPadding";
                div.appendChild(icon);
                div.appendChild(label);
                li.appendChild(div);
                li.appendChild(select);
                reminders.appendChild(li);
                
            }

            function behaviorNote(behavior){
                console.log(behavior);
            }

            // When the user clicks anywhere outside of the form window, close it
            window.onclick = function(event) {
                if (event.target == formElement) {
                    formElement.style.display = "none";
                }
            }
        </script>
        
        <script>
            //template functions (page 1)
            function pushSummary(summary_HTML) {
                theUrl = window.location.href + '/push-summary';
                // data = "text=" + summary_element.innerHTML;
                data = "text=" + summary_HTML;
                // data = "text=" + summary_element.value;
                httpPostAsync(theUrl, data, null);
            }

            function pushAmSnack(snack_HTML) {
                theUrl = window.location.href + '/push-am-snack';
                data = "text=" + snack_HTML;
                httpPostAsync(theUrl, data, null);
            }

            function pushLunch(lunch_HTML) {
                theUrl = window.location.href + '/push-lunch';
                data = "text=" + lunch_HTML;
                httpPostAsync(theUrl, data, null);
            }

            function getHeader() {
                return converQuillDeltaToHTML(<%- header.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+').replace(/CLEANSED APSTR STRING/g, "'") %>);
            }

            function getFooter() {
                return converQuillDeltaToHTML(<%- footer.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+').replace(/CLEANSED APSTR STRING/g, "'") %>);

            }

            function escapeSpecialChars(string) {
                        var x = string.replace(/\\/g, "\\\\")
                            .replace(/\&/g, "CLEANSED AMPERSAND STRING")
                            .replace(/\+/g, "CLEANSED ADDITION STRING")
                            .replace(/\'/g, "CLEANSED APSTR STRING")
                            .replace(/\n/g, "\\n")
                            .replace(/\r/g, "\\r")
                            .replace(/\t/g, "\\t")
                            .replace(/\f/g, "\\f");

                        return x;
                    }

                    function escapeSpecialCharsHTML(string) {
                        var x = string.replace(/\&/g, "CLEANSED AMPERSAND STRING")
                            .replace(/\+/g, "CLEANSED ADDITION STRING")
                            .replace(/\</g, "CLEANSED LT STRING")
                            .replace(/\>/g, "CLEANSED GT STRING")
                            .replace(/\'/g, "CLEANSED APSTR STRING")

                        return x;
                    }

            function getReminders() {
                var remindersHTML = [];
                reminders.forEach(reminder => {
                    remindersHTML.push({
                        title: reminder.title,
                        contents: converQuillDeltaToHTML(JSON.parse(reminder.contents))
                    }
                    )
                })
                return JSON.stringify(remindersHTML);
            }

            function converQuillDeltaToHTML(delta) {
                var tempCont = document.createElement("div");
                var delta_string = JSON.stringify(delta);
                var deltaParsed = escapeSpecialCharsHTML(delta_string);
                (new Quill(tempCont)).setContents(JSON.parse(deltaParsed));

                var result = tempCont.getElementsByClassName("ql-editor")[0].innerHTML
                return result;
            }
        </script>

        <script>
            function sendEmails(students, todaysBehaviors, next){
                
                // openEmailReport(null, false);

                var studentSuccessObjects = [];

                if(allStudentsApproved()){
                    var theUrl = window.location.href+'/send';
                    var header = getHeader();
                    var footer = getFooter();

                    var summaryHTML = converQuillDeltaToHTML(summaryQuill.getContents())
                    var snackHTML = converQuillDeltaToHTML(snackQuill.getContents())
                    var lunchHTML = converQuillDeltaToHTML(lunchQuill.getContents())
                    var reminders_string = getReminders();
                    var universal_data = `summaryHTML=${summaryHTML}` + 
                                            `&snackHTML=${snackHTML}` + 
                                            `&lunchHTML=${lunchHTML}` +
                                            `&header=${header}` +
                                            `&footer=${footer}` +
                                            `&reminders=${reminders_string}`;
                    // console.log(Object.values(todaysBehaviors))
                    // console.log(Object.values(todaysBehaviors))
                    var behavior_names = [];
                    
                    todaysBehaviors.forEach(behavior => {
                        behavior_names.push(behavior.name);
                    })

                    students.forEach(student => {
                        var necessary_behaviors = null;
                        var personalized_data = `&id=${student.id}` +
                                                `&name=${student.name}` +
                                                `&listOfActivities=${JSON.stringify(student.listOfActivities)}` +
                                                `&todaysBehaviorNames=${JSON.stringify(behavior_names)}`;
                                                // `&listOfBehaviors=${JSON.stringify(student.listOfBehaviors)}`; <-- have to re-pull this data in post in case there was an update
                        function handleSuccessReport(data) {
                            data = JSON.parse(data);
                            studentSuccessObjects.push(data);

                            if(students.length === studentSuccessObjects.length) {
                                //window.location.href = "/emailReport";
                                handleEmailResults(studentSuccessObjects);
                            }
                        }
                        
                        httpPostAsync(theUrl, universal_data + personalized_data, handleSuccessReport);
                        // console.log(student.listOfBehaviors['AM Snack']);

                    });

                }
            }

            function handleEmailResults(results) {
                // openEmailReport(results, true);
                var reportForm = document.getElementById("emailReportForm");
                var reportText = document.getElementById("report");
                reportText.value = JSON.stringify(results);
                reportForm.submit();
            }

            function renderView(todaysBehaviors){
                var theUrl = window.location.href+'/render-email-view';
                var header = getHeader();
                var footer = getFooter();
                // var reminders_string = JSON.stringify(reminders);                
                    var reminders = getReminders();
                    var summaryHTML = converQuillDeltaToHTML(summaryQuill.getContents())
                    var snackHTML = converQuillDeltaToHTML(snackQuill.getContents())
                    var lunchHTML = converQuillDeltaToHTML(lunchQuill.getContents())
                    var reminders_string = getReminders();
                    var universal_data = `summaryHTML=${summaryHTML}` + 
                                            `&snackHTML=${snackHTML}` + 
                                            `&lunchHTML=${lunchHTML}` +
                                            `&header=${header}` +
                                            `&footer=${footer}` +
                                            `&reminders=${reminders}`;
                var behavior_names = [];
                
                todaysBehaviors.forEach(behavior => {
                    behavior_names.push(behavior.name);
                })


                var necessary_behaviors = null;

                var personalized_data = `&id=${currentStudentData.id}` +
                                        `&name=${currentStudentData.name}` +
                                        `&listOfActivities=${JSON.stringify(currentStudentData.listOfActivities)}` +
                                        `&todaysBehaviorNames=${JSON.stringify(behavior_names)}`;
                                        // `&listOfBehaviors=${JSON.stringify(student.listOfBehaviors)}`; <-- have to re-pull this data in post in case there was an update

                function handleResponse(data) {
                    data = JSON.parse(data)
                    // document.getElementById("reviewData").innerHTML = data.rendered_HTML;
                    openReview(data.rendered_HTML);
                }
                var callback = handleResponse;
                httpPostAsync(theUrl, universal_data + personalized_data, callback);
                // console.log(student.listOfBehaviors['AM Snack']);

            }
        </script>
        <script>

                    function resetQuills() {
                        summaryQuill.setContents(<%- summary.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+') %>);
                        snackQuill.setContents(<%- snack.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+') %>)
                        lunchQuill.setContents(<%- lunch.replace(/CLEANSED AMPERSAND STRING/g,'&').replace(/CLEANSED ADDITION STRING/g, '+') %>)
                    }
        </script>
    </body>
</html>